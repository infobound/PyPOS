#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    Jul 06, 2020 11:21:46 PM EDT  platform: Windows NT

import sys
import threading
import Data.DB as posDB
import Forms.formRegister_cart as UICart
import keyboard
import datetime

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

global KeysRecorded
global KeyPressTiming

KeysRecorded=""
KeyPressTiming=-1
formRegister=None
Cart=UICart.Cart()

def key_pressed(event):
    print("to do - key capture") #I hate this

    global KeysRecorded
    global KeyPressTiming

    #check for enter key
    if(event.keysym=="Return" and KeyPressTiming!=-1):
        #check that time is less than 1 second
        KeyPressDiff=(datetime.datetime.utcnow()-KeyPressTiming).total_seconds()
        if(KeyPressDiff<=1):
            #call function to add to register
            if AddUPCItemToCart(KeysRecorded)==False:
                formRegister.lblStatus.configure(activeforeground="red")
                formRegister.lblStatus.configure(text='''Status: Error adding upc item to cart''')
            KeysRecorded=""
            KeyPressTiming=-1
            return
        else:
            KeysRecorded=""
            KeyPressTiming=-1
            return

    KeysRecorded=KeysRecorded+event.char
    if(KeyPressTiming==-1):
        KeyPressTiming=datetime.datetime.utcnow()
        formRegister.lblStatus.configure(activeforeground="green")
        formRegister.lblStatus.configure(text='''Status: Ready''')


def UpdateGUI():
    formRegister.scrollOrderItems = tk.Scrollbar(formRegister.frameOrderItems)
    formRegister.scrollOrderItems.place(x=formRegister.frameOrderItems.winfo_width()-32, height=formRegister.frameOrderItems.winfo_height())
    formRegister.canvasOrderItems.config(yscrollcommand=formRegister.scrollOrderItems.set)
    formRegister.scrollOrderItems.config(command = formRegister.canvasOrderItems.yview )
    print("to do: fix scrollbar")

def set_Tk_var():
    global combobox
    combobox = tk.StringVar()

def ResizeFrameOrderItems():
    ResizeTimer = threading.Timer(1, UpdateGUI)
    ResizeTimer.start()

def OrderItemClick(event, arg):
    print("to do: OrderItemClick")
    print(event)
    print(arg)

def LoadCartItems():
    import locale
    locale.setlocale( locale.LC_ALL, '' )
    intLineHeight=40
    intRowCnt=-1
    for ci in Cart.Items:
        intRowCnt+=1

        #name
        formRegister.LineItemDesc=tk.Label(formRegister.canvasOrderItems)
        formRegister.LineItemDesc.place(x=0,y=intRowCnt*intLineHeight)
        formRegister.LineItemDesc.config(text=ci.Name, width=19,height=2,anchor="w")
        formRegister.LineItemDesc.config(font="-family {Segoe UI} -size 11")
        formRegister.LineItemDesc.bind('<Button-1>', lambda event, arg=intRowCnt: OrderItemClick(event, arg))

        #qty
        formRegister.LineItemQty=tk.Label(formRegister.canvasOrderItems)
        formRegister.LineItemQty.config(text=ci.Qty, width=5,height=2)
        formRegister.LineItemQty.place(x=140,y=intRowCnt*intLineHeight)
        formRegister.LineItemQty.config(font="-family {Segoe UI} -size 11")
        formRegister.LineItemQty.bind('<Button-1>', lambda event, arg=intRowCnt: OrderItemClick(event, arg))

        #price
        formRegister.LineItemPrice=tk.Label(formRegister.canvasOrderItems)
        formRegister.LineItemPrice.config(text=locale.currency(ci.Price, grouping=True ), width=7,height=2,anchor="e")
        formRegister.LineItemPrice.place(x=180,y=intRowCnt*intLineHeight)
        formRegister.LineItemPrice.config(font="-family {Segoe UI} -size 11")
        formRegister.LineItemPrice.bind('<Button-1>', lambda event, arg=intRowCnt: OrderItemClick(event, arg))

    intCanvasHeight=(len(Cart.Items))*intLineHeight
    formRegister.canvasOrderItems.place(height=intCanvasHeight)
    formRegister.canvasOrderItems.config(scrollregion=(0,0,240,intCanvasHeight))

    formRegister.lblSubTotal.configure(text=locale.currency(Cart.GetSubTotal()))
    formRegister.lblTax.configure(text=locale.currency(Cart.GetCartTax()))
    formRegister.lblTotal.configure(text=locale.currency(Cart.GetCartTotal()))
    
    
    




def LoadFoodItems(event, arg):
    print("to do: LoadFoodItems - Add style to buttons", arg)
    #multiple pages
    #style buttons
    #different size buttons

    #print(formRegister.frameItems.children)
    #remove all existing buttons
    for child in formRegister.frameItems.winfo_children():
        child.destroy()
    
    #create buttons
    intRow=0
    intCol=-1
    curFoodItemGroups=posDB.GetFoodItemsByGroupRID(arg)
    for rowTab in curFoodItemGroups:
        if (intCol==6):
            if (intRow==10):
                #stop loading
                break

            intCol=0
            intRow+=1
        else:
            intCol+=1

        btn=tk.Button(formRegister.frameItems)
        
        btn.place(x=intCol*105, y=intRow*50+10, height=42, width=97)
        btn.configure(text=rowTab[2])
        btn.bind('<Button-1>', lambda event, arg=rowTab[0]: AddFoodItemToCart(event, arg))
        
def AddFoodItemToCart(event, arg):
    Cart.AddFoodItem(arg)
    LoadCartItems()

def AddUPCItemToCart(strUPC):
    Cart.AddUPCItem(strUPC)
    LoadCartItems()

def CheckoutWithCash():
    print("get cash")
    for child in formRegister.frameItems.winfo_children():
        child.destroy()



    
def CheckoutWithCard():
    print("swipe card")